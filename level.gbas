// --------------------------------- //
// Project: Starbase_Alpha_dev
// Start: Monday, November 11, 2013
// IDE Version: 11.414


// SETCURRENTDIR("Media") // go to media files

TYPE star_sprite_type
	id
ENDTYPE

TYPE robot_sprite_type
	id
ENDTYPE

TYPE ground_sprite_type
	id
ENDTYPE

TYPE wall_sprite_type
	id
ENDTYPE

TYPE lvl_ground_type
	id
	x
	y
ENDTYPE

TYPE lvl_wall_type
	id
	x
	y
ENDTYPE

TYPE lvl_light_type
	alpha
	x
	y
ENDTYPE

TYPE lvl_generator_type
	size_x
	size_y
	rooms_x
	rooms_y
ENDTYPE


GLOBAL star_sprite[] AS star_sprite_type, robot_sprite[] AS robot_sprite_type, ground_sprite[] AS ground_sprite_type, lvl_generator AS lvl_generator_type
GLOBAL lvl_ground[] AS lvl_ground_type, lvl_light[] AS lvl_light_type, wall_sprite[] AS wall_sprite_type, lvl_wall[] AS lvl_wall_type

FUNCTION lvl:

	lvl_draw_stars()
	lvl_draw_underground()
	lvl_draw_ground()
	lvl_draw_wall()
	lvl_draw_light()


ENDFUNCTION

FUNCTION lvl_draw_stars:



ENDFUNCTION


FUNCTION lvl_draw_underground:
LOCAL tmp_x, tmp_y
//		DRAWSPRITE image[star_sprite[0].id].id$, 0, 0
//		DRAWSPRITE image[star_sprite[1].id].id$, 32, 0
//		DRAWSPRITE image[star_sprite[2].id].id$, 64, 0

//	FOR tmp_y = 0 TO (sys_settings.resolution_y / 32)
//		FOR tmp_x = 0 TO (sys_settings.resolution_x / 32)
//			//DRAWSPRITE image[ground_sprite[0].id].id$, tmp_x * 32, tmp_y * 32
//			sys_draw_zoom_sprite(image[ground_sprite[0].id].id$, tmp_x * 32, tmp_y * 32, 32, 32)
//		NEXT
//	NEXT

	FOREACH m IN lvl_ground[]
		sys_draw_zoom_sprite(m.id, m.x, m.y, 32, 32)
	NEXT

	//DRAWSPRITE image[ground_sprite[0].id].id$, 0, 0


ENDFUNCTION

FUNCTION lvl_draw_ground:



ENDFUNCTION

FUNCTION lvl_draw_wall:
	FOREACH m IN lvl_wall[]
		sys_draw_zoom_sprite(m.id, m.x, m.y, 32, 32)
	NEXT
ENDFUNCTION

FUNCTION lvl_draw_light:

	FOREACH m IN lvl_light[]
		IF m.alpha < 0
			ALPHAMODE m.alpha
				DRAWRECT m.x, m.y, 8, 8, RGB(0, 0, 0)
			ALPHAMODE 0
		ENDIF
	NEXT
ENDFUNCTION

FUNCTION lvl_generate_level:
LOCAL m AS lvl_ground_type

	FOR tmp_y = 0 TO lvl_generator.size_y
		FOR tmp_x = 0 TO lvl_generator.size_x



			m.id = image[ground_sprite[0].id].id$

			IF tmp_x > 0 AND tmp_x < lvl_generator.size_x AND tmp_y = 0 THEN m.id = image[ground_sprite[1].id].id$
			IF tmp_x > 0 AND tmp_x < lvl_generator.size_x AND tmp_y = lvl_generator.size_y THEN m.id = image[ground_sprite[2].id].id$

			IF tmp_y > 0 AND tmp_y < lvl_generator.size_y AND  tmp_x = 0 THEN m.id = image[ground_sprite[3].id].id$
			IF tmp_y > 0 AND tmp_y < lvl_generator.size_y AND tmp_x = lvl_generator.size_x THEN m.id = image[ground_sprite[4].id].id$

			IF tmp_x = 0 AND tmp_y = 0 THEN m.id = image[ground_sprite[5].id].id$
			IF tmp_x = lvl_generator.size_x AND tmp_y = 0 THEN m.id = image[ground_sprite[6].id].id$
			IF tmp_x = lvl_generator.size_x AND tmp_y = lvl_generator.size_y THEN m.id = image[ground_sprite[7].id].id$
			IF tmp_x = 0 AND tmp_y = lvl_generator.size_y THEN m.id = image[ground_sprite[8].id].id$

			m.x = tmp_x * 32
			m.y = tmp_y * 32

			DIMPUSH lvl_ground[], m


		NEXT
	NEXT

ENDFUNCTION

FUNCTION lvl_generate_wall:
LOCAL n AS lvl_wall_type, zufall
LOCAL room_count_x, room_count_y, room_x, room_y
LOCAL init_y, allow_inc_y


	room_x = INTEGER(lvl_generator.size_x / lvl_generator.rooms_x)
	room_y = INTEGER(lvl_generator.size_y / lvl_generator.rooms_y)
	
	init_y = 0
	allow_inc_y = FALSE

	FOREACH m IN lvl_ground[]

		IF m.x = 0 THEN room_count_x = 0
		IF init_y <> m.y
			allow_inc_y = TRUE
			init_y = m.y
		ENDIF

//================

		IF m.id = image[ground_sprite[0].id].id$

			IF m.y > 0 AND m.y < (lvl_generator.size_y * 32) AND MOD(m.x, (room_x * 32)) = 0 AND room_count_x < lvl_generator.rooms_x - 1
				n.id = image[wall_sprite[2].id].id$
				n.x = m.x
				n.y = m.y
				INC room_count_x, 1
			ENDIF

			IF MOD(m.y, room_y * 32) = 0
				
				IF allow_inc_y = TRUE
					allow_inc_y = FALSE
					INC room_count_y, 1
				ENDIF

				IF room_count_y < lvl_generator.rooms_y
					n.id = image[wall_sprite[0].id].id$
					n.x = m.x
					n.y = m.y
				ENDIF
				
			ENDIF

			IF MOD(m.x, (room_x * 32)) = 0 AND MOD(m.y, room_y * 32) = 0 AND room_count_x < lvl_generator.rooms_x - 1 AND room_count_y < lvl_generator.rooms_y
				n.id = image[wall_sprite[12].id].id$
				n.x = m.x
				n.y = m.y	
			ENDIF



			IF n.id <> 0 THEN DIMPUSH lvl_wall[], n
		ENDIF

//================

		IF m.id <> image[ground_sprite[0].id].id$

			IF m.id = image[ground_sprite[1].id].id$ OR m.id = image[ground_sprite[2].id].id$
				IF RND(100) > 89
					n.id = image[wall_sprite[1].id].id$
				ELSE
					n.id = image[wall_sprite[0].id].id$
				ENDIF
				n.x = m.x
				n.y = m.y
			ENDIF

			IF m.id = image[ground_sprite[3].id].id$ OR m.id = image[ground_sprite[4].id].id$
				IF RND(100) > 89
					n.id = image[wall_sprite[3].id].id$
				ELSE
					n.id = image[wall_sprite[2].id].id$
				ENDIF
				n.x = m.x
				n.y = m.y
			ENDIF

			IF MOD(m.x, (room_x * 32)) = 0 AND room_count_x < lvl_generator.rooms_x
				IF m.y = 0
					n.id = image[wall_sprite[8].id].id$
					INC room_count_x, 1
				ENDIF

				IF m.y = (lvl_generator.size_y * 32)
					n.id = image[wall_sprite[10].id].id$
					INC room_count_x, 1
				ENDIF
			ENDIF










//			IF MOD(m.y, (room_y * 32)) = 0 AND room_count_y < lvl_generator.rooms_y
//				IF m.y = 0
//					n.id = image[wall_sprite[8].id].id$
//					INC room_count_x, 1
//				ENDIF
//
//				IF m.y = (lvl_generator.size_y * 32)
//					n.id = image[wall_sprite[10].id].id$
//					INC room_count_x, 1
//				ENDIF
//			ENDIF

			IF m.id = image[ground_sprite[5].id].id$
				n.id = image[wall_sprite[4].id].id$
				n.x = m.x
				n.y = m.y
			ENDIF

			IF m.id = image[ground_sprite[6].id].id$
				n.id = image[wall_sprite[5].id].id$
				n.x = m.x
				n.y = m.y
			ENDIF

			IF m.id = image[ground_sprite[7].id].id$
				n.id = image[wall_sprite[6].id].id$
				n.x = m.x
				n.y = m.y
			ENDIF

			IF m.id = image[ground_sprite[8].id].id$
				n.id = image[wall_sprite[7].id].id$
				n.x = m.x
				n.y = m.y
			ENDIF

			IF n.id <> 0 THEN DIMPUSH lvl_wall[], n

		ENDIF
//================


	NEXT

ENDFUNCTION

FUNCTION lvl_generate_light:
LOCAL m AS lvl_light_type

	FOR tmp_x = 0 TO (lvl_generator.size_x * 4) - 1
		FOR tmp_y = 0 TO (lvl_generator.size_y * 4) - 1

			m.alpha = -0.5
			m.x = tmp_x * 8
			m.y = tmp_y * 8

			IF tmp_x = 4 THEN m.alpha = 0
			IF tmp_x = 5 THEN m.alpha = -0.1
			IF tmp_x = 6 THEN m.alpha = -0.2
			IF tmp_x = 7 THEN m.alpha = -0.3
			IF tmp_x = 8 THEN m.alpha = -0.4

			DIMPUSH lvl_light[], m


		NEXT
	NEXT
ENDFUNCTION