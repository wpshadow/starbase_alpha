// --------------------------------- //
// Project: Starbase_Alpha_dev
// Start: Monday, November 11, 2013
// IDE Version: 11.414


// SETCURRENTDIR("Media") // go to media files

TYPE star_sprite_type
	id
ENDTYPE

TYPE robot_sprite_type
	id
ENDTYPE

TYPE ground_sprite_type
	id
ENDTYPE

TYPE wall_sprite_type
	id
ENDTYPE

TYPE lvl_ground_type
	id
	x
	y
ENDTYPE

TYPE lvl_wall_type
	id
	x
	y
ENDTYPE

TYPE lvl_wall_object_type
	status
	cautious
	id[10]
	x
	y
ENDTYPE

TYPE lvl_light_type
	alpha
	x
	y
ENDTYPE

TYPE lvl_generator_type
	size_x
	size_y
	rooms_x
	rooms_y
ENDTYPE

TYPE lvl_room_light_type
	start_x
	start_y
	size_x
	size_y
	tile[999][999]
	light_counter
	light[99][99]
	light_typ[99]
ENDTYPE




GLOBAL star_sprite[] AS star_sprite_type, robot_sprite[] AS robot_sprite_type, ground_sprite[] AS ground_sprite_type, lvl_generator AS lvl_generator_type
GLOBAL lvl_ground[] AS lvl_ground_type, lvl_light[] AS lvl_light_type, wall_sprite[] AS wall_sprite_type, lvl_wall[] AS lvl_wall_type, lvl_wall_object[] AS lvl_wall_object_type
GLOBAL lvl_room_light[] AS lvl_room_light_type

FUNCTION lvl:

	//lvl_draw_stars()
	lvl_draw_underground()
	//lvl_draw_ground()
	lvl_draw_wall()
	lvl_draw_update_wall_objects()
	lvl_draw_light()


ENDFUNCTION

FUNCTION lvl_draw_stars:



ENDFUNCTION


FUNCTION lvl_draw_underground:
LOCAL tmp_x, tmp_y
//		DRAWSPRITE image[star_sprite[0].id].id$, 0, 0
//		DRAWSPRITE image[star_sprite[1].id].id$, 32, 0
//		DRAWSPRITE image[star_sprite[2].id].id$, 64, 0

//	FOR tmp_y = 0 TO (sys_settings.resolution_y / 32)
//		FOR tmp_x = 0 TO (sys_settings.resolution_x / 32)
//			//DRAWSPRITE image[ground_sprite[0].id].id$, tmp_x * 32, tmp_y * 32
//			sys_draw_zoom_sprite(image[ground_sprite[0].id].id$, tmp_x * 32, tmp_y * 32, 32, 32)
//		NEXT
//	NEXT

	FOREACH m IN lvl_ground[]
		sys_draw_zoom_sprite(m.id, m.x, m.y, 32, 32)
	NEXT

	//DRAWSPRITE image[ground_sprite[0].id].id$, 0, 0


ENDFUNCTION

FUNCTION lvl_draw_ground:



ENDFUNCTION

FUNCTION lvl_draw_wall:
	FOREACH m IN lvl_wall[]
		sys_draw_zoom_sprite(m.id, m.x, m.y, 32, 32)
	NEXT
ENDFUNCTION

FUNCTION lvl_draw_update_wall_objects:
	FOREACH m IN lvl_wall_object[]

		SELECT m.cautious
		// Fenster
		CASE 0

			IF m.status = 0 THEN sys_draw_zoom_sprite(m.id[0], m.x, m.y, 32, 32)
			IF m.status = 1 THEN sys_draw_zoom_sprite(m.id[1], m.x, m.y, 32, 32)


			IF mouse.x >= (m.x * 32) AND mouse.x <= (m.x * 32) + 32 AND mouse.y >= (m.y * 32) AND mouse.y <= (m.y * 32) + 32
				IF m.status = 0 THEN sys_draw_zoom_sprite(image[gui_sprite[1].id].id$, m.x, m.y, 32, 32)
				IF m.status = 1 THEN sys_draw_zoom_sprite(image[gui_sprite[0].id].id$, m.x, m.y, 32, 32)

				IF mouse.b1 = 1
					INC m.status, 1
					IF m.status > 1 THEN m.status = 0
				ENDIF

			ENDIF

		// Tür
		CASE 1

			IF m.status = 0 THEN sys_draw_zoom_sprite(m.id[0], m.x, m.y, 32, 32)
			IF m.status = 1 THEN sys_draw_zoom_sprite(m.id[1], m.x, m.y, 32, 32)
			IF m.status = 2 THEN sys_draw_zoom_sprite(m.id[2], m.x, m.y, 32, 32)

			IF mouse.x >= (m.x * 32) AND mouse.x <= (m.x * 32) + 32 AND mouse.y >= (m.y * 32) AND mouse.y <= (m.y * 32) + 32

				IF m.status = 0 THEN sys_draw_zoom_sprite(image[gui_sprite[2].id].id$, m.x, m.y, 32, 32)
				IF m.status = 1 THEN sys_draw_zoom_sprite(image[gui_sprite[1].id].id$, m.x, m.y, 32, 32)
				IF m.status = 2 THEN sys_draw_zoom_sprite(image[gui_sprite[0].id].id$, m.x, m.y, 32, 32)

				IF mouse.b1 = 1
					INC m.status, 1
					IF m.status > 2 THEN m.status = 1
				ENDIF

			ENDIF

		ENDSELECT


	NEXT


ENDFUNCTION

FUNCTION lvl_draw_light:
LOCAL tmp_x, tmp_y

	FOREACH m IN lvl_room_light[]
		FOR tmp_y = 0 TO m.size_y - 1
			FOR tmp_x = 0 TO m.size_x - 1
				IF m.tile[tmp_x][tmp_y] = 0
					ALPHAMODE -0.5
						DRAWRECT (m.start_x * 32) + (tmp_x * 32), (m.start_y * 32) + (tmp_y * 32), 32, 32, RGB(0, 0, 0)
					ALPHAMODE 0
				ENDIF
				//n.tile[tmp_x][tmp_y] = 0
			NEXT
		NEXT
	NEXT

//	FOREACH m IN lvl_light[]
//		IF m.alpha < 0
//			ALPHAMODE -0.99
//				DRAWRECT m.x, m.y, 8, 8, RGB(0, 0, 0)
//			ALPHAMODE 0
//		ENDIF
//	NEXT
ENDFUNCTION

FUNCTION lvl_generate_level:
LOCAL m AS lvl_ground_type, zufall

	FOR tmp_y = 0 TO lvl_generator.size_y
		FOR tmp_x = 0 TO lvl_generator.size_x


			zufall = RND(100)

			IF zufall > 97
				m.id = image[ground_sprite[9].id].id$
			ELSE
				m.id = image[ground_sprite[0].id].id$
			ENDIF

			IF tmp_x > 0 AND tmp_x < lvl_generator.size_x AND tmp_y = 0 THEN m.id = image[ground_sprite[1].id].id$
			IF tmp_x > 0 AND tmp_x < lvl_generator.size_x AND tmp_y = lvl_generator.size_y THEN m.id = image[ground_sprite[2].id].id$

			IF tmp_y > 0 AND tmp_y < lvl_generator.size_y AND  tmp_x = 0 THEN m.id = image[ground_sprite[3].id].id$
			IF tmp_y > 0 AND tmp_y < lvl_generator.size_y AND tmp_x = lvl_generator.size_x THEN m.id = image[ground_sprite[4].id].id$

			IF tmp_x = 0 AND tmp_y = 0 THEN m.id = image[ground_sprite[5].id].id$
			IF tmp_x = lvl_generator.size_x AND tmp_y = 0 THEN m.id = image[ground_sprite[6].id].id$
			IF tmp_x = lvl_generator.size_x AND tmp_y = lvl_generator.size_y THEN m.id = image[ground_sprite[7].id].id$
			IF tmp_x = 0 AND tmp_y = lvl_generator.size_y THEN m.id = image[ground_sprite[8].id].id$

			m.x = tmp_x
			m.y = tmp_y

			DIMPUSH lvl_ground[], m


		NEXT
	NEXT

ENDFUNCTION

FUNCTION lvl_generate_wall:
LOCAL n AS lvl_wall_type, zufall
LOCAL room_count_x, room_count_y, room_size_x, room_size_y
LOCAL init_x, init_y, room_set_x, room_set_y
LOCAL room_total_count_x, room_total_count_y, total_count_init
LOCAL aktiv_x, aktiv_y, half_x, half_y, tmp_obj_id$

	room_size_x = INTEGER(lvl_generator.size_x / lvl_generator.rooms_x)
	room_size_x = room_size_x - 1
	room_size_y = INTEGER(lvl_generator.size_y / lvl_generator.rooms_y)
	room_size_y = room_size_y - 1

	init_x = 0
	init_y = 0

	room_total_count_x = 1
	room_total_count_y = 1

	room_count_x = -1
	room_count_y = -1

	FOREACH m IN lvl_ground[]

		tmp_obj_id$ = ""

		IF init_x <> m.x
			INC room_count_x, 1
			// -
			IF room_count_x = INTEGER(room_size_x / 2) - 1
				half_x = TRUE
			ELSE
				half_x = FALSE
			ENDIF
			// -
			IF room_count_x = room_size_x AND room_total_count_x < lvl_generator.rooms_x
				aktiv_x = TRUE
			ELSE
				aktiv_x = FALSE
			ENDIF
			// -
			IF room_count_x > room_size_x
				room_count_x = -1
				INC room_total_count_x, 1
			ENDIF
			// -
			init_x = m.x
			// -
			IF m.x = 0
				room_count_x = -1
				room_total_count_x = 1
			ENDIF
		ENDIF

		IF init_y <> m.y
			INC room_count_y, 1
			// -
			IF room_count_y = INTEGER(room_size_y / 2)
				half_y = TRUE
			ELSE
				half_y = FALSE
			ENDIF
			// -
			IF room_count_y = room_size_y AND room_total_count_y < lvl_generator.rooms_y
				aktiv_y = TRUE
			ELSE
				aktiv_y = FALSE
			ENDIF
			// -
			IF room_count_y > room_size_y
				room_count_y = 0
				INC room_total_count_y, 1
			ENDIF

			init_y = m.y
		ENDIF

		IF m.id = image[ground_sprite[5].id].id$ THEN lvl_add_walls(image[wall_sprite[4].id].id$, m.x, m.y)
		IF m.id = image[ground_sprite[6].id].id$ THEN lvl_add_walls(image[wall_sprite[5].id].id$, m.x, m.y)
		IF m.id = image[ground_sprite[7].id].id$ THEN lvl_add_walls(image[wall_sprite[6].id].id$, m.x, m.y)
		IF m.id = image[ground_sprite[8].id].id$ THEN lvl_add_walls(image[wall_sprite[7].id].id$, m.x, m.y)

		IF aktiv_y = TRUE AND aktiv_x = FALSE AND half_x = FALSE AND m.x > 0 AND m.x < lvl_generator.size_x AND m.y > 0 AND m.y < lvl_generator.size_y
			lvl_add_walls(image[wall_sprite[0].id].id$, m.x, m.y)
		ENDIF

		IF aktiv_x = TRUE AND aktiv_y = FALSE AND half_y = FALSE AND m.x > 0 AND m.x < lvl_generator.size_x AND m.y > 0 AND m.y < lvl_generator.size_y
			lvl_add_walls(image[wall_sprite[2].id].id$, m.x, m.y)
		ENDIF

		IF aktiv_x = TRUE AND aktiv_y = TRUE AND m.x > 0 AND m.x < lvl_generator.size_x AND m.y > 0 AND m.y < lvl_generator.size_y
			lvl_add_walls(image[wall_sprite[12].id].id$, m.x, m.y)
		ENDIF

		IF aktiv_x = TRUE AND m.y = 0
			lvl_add_walls(image[wall_sprite[8].id].id$, m.x, m.y)
		ENDIF

		IF m.y = 0 AND m.x > 0 AND m.x < lvl_generator.size_x AND half_x = FALSE AND aktiv_x = FALSE OR m.y = lvl_generator.size_y AND m.x > 0 AND m.x < lvl_generator.size_x AND half_x = FALSE AND aktiv_x = FALSE
			lvl_add_walls(image[wall_sprite[0].id].id$, m.x, m.y)
		ENDIF

		IF aktiv_x = TRUE AND m.y = lvl_generator.size_y
			lvl_add_walls(image[wall_sprite[10].id].id$, m.x, m.y)
		ENDIF

		IF half_x = TRUE AND m.y = 0
			tmp_obj_id$ = image[wall_sprite[13].id].id$ + ";" + image[wall_sprite[17].id].id$
			lvl_add_wall_object(0, 0, tmp_obj_id$, m.x, m.y)
		ENDIF

		IF half_x = TRUE AND m.y = lvl_generator.size_y
			tmp_obj_id$ = image[wall_sprite[15].id].id$ + ";" + image[wall_sprite[19].id].id$
			lvl_add_wall_object(0, 0, tmp_obj_id$, m.x, m.y)
		ENDIF

		IF half_x = TRUE AND aktiv_y = TRUE AND m.x > 0 AND m.x < lvl_generator.size_x AND m.y > 0 AND m.y < lvl_generator.size_y
			tmp_obj_id$ = image[wall_sprite[21].id].id$ + ";" + image[wall_sprite[23].id].id$ + ";" + image[wall_sprite[25].id].id$
			lvl_add_wall_object(0, 1, tmp_obj_id$, m.x, m.y)
		ENDIF







		IF aktiv_y = TRUE AND m.x = 0
			lvl_add_walls(image[wall_sprite[11].id].id$, m.x, m.y)
		ENDIF

		IF m.x = 0 AND m.y > 0 AND m.y < lvl_generator.size_y AND half_y = FALSE AND aktiv_y = FALSE OR m.x = lvl_generator.size_x AND m.y > 0 AND m.y < lvl_generator.size_y AND half_y = FALSE AND aktiv_y = FALSE
			lvl_add_walls(image[wall_sprite[2].id].id$, m.x, m.y)
		ENDIF

		IF aktiv_y = TRUE AND m.x = lvl_generator.size_x
			lvl_add_walls(image[wall_sprite[9].id].id$, m.x, m.y)
		ENDIF

		IF half_y = TRUE AND m.x = 0
			tmp_obj_id$ = image[wall_sprite[16].id].id$ + ";" + image[wall_sprite[20].id].id$
			lvl_add_wall_object(0, 0, tmp_obj_id$, m.x, m.y)
		ENDIF

		IF half_y = TRUE AND m.x = lvl_generator.size_x
			tmp_obj_id$ = image[wall_sprite[14].id].id$ + ";" + image[wall_sprite[18].id].id$
			lvl_add_wall_object(0, 0, tmp_obj_id$, m.x, m.y)
		ENDIF

		IF aktiv_x = TRUE AND half_y = TRUE AND m.x > 0 AND m.x < lvl_generator.size_x AND m.y > 0 AND m.y < lvl_generator.size_y
			tmp_obj_id$ = image[wall_sprite[22].id].id$ + ";" + image[wall_sprite[24].id].id$ + ";" + image[wall_sprite[26].id].id$
			lvl_add_wall_object(0, 1, tmp_obj_id$, m.x, m.y)
		ENDIF


	NEXT





ENDFUNCTION

FUNCTION lvl_add_walls: id, x, y
LOCAL m AS lvl_wall_type

	m.id = id
	m.x =  x
	m.y =  y

	DIMPUSH lvl_wall[], m

ENDFUNCTION

FUNCTION lvl_add_wall_object: status, cautious, id$, x, y
LOCAL m AS lvl_wall_object_type, inhalt$[], lang

	lang = SPLITSTR(id$, inhalt$[], ";")

	m.status = status
	m.cautious = cautious

	FOR tmp = 0 TO lang - 1
		m.id[tmp] = inhalt$[tmp]
	NEXT

	m.x =      x
	m.y =      y

	DIMPUSH lvl_wall_object[], m

ENDFUNCTION

FUNCTION lvl_generate_light:
LOCAL n AS lvl_room_light_type, found
LOCAL lenght_x, lenght_y, hit_x, hit_y, offset_x, offset_y

	FOREACH m IN lvl_wall[]
		IF m.id = image[wall_sprite[4].id].id$ OR m.id = image[wall_sprite[8].id].id$ OR m.id = image[wall_sprite[11].id].id$ OR m.id = image[wall_sprite[12].id].id$

			n.start_x = m.x + 1
			n.start_y = m.y + 1
			lenght_x = 0
			lenght_y = 0
			hit_x = 0
			hit_y = 0
			offset_x = 0
			offset_y = 0
			found = FALSE

			WHILE found = FALSE

				IF hit_x = FALSE THEN INC offset_x, 1
				IF hit_y = FALSE THEN INC offset_y, 1

				lenght_x = n.start_x + offset_x
				lenght_y = n.start_y + offset_y

				FOREACH o IN lvl_wall[]
					IF hit_x = FALSE
						IF o.x = lenght_x AND o.y = n.start_y
							hit_x = TRUE
						ENDIF
					ENDIF
					IF hit_y = FALSE
						IF o.x = n.start_x AND o.y = lenght_y
							hit_y = TRUE
						ENDIF
					ENDIF
				NEXT


				IF hit_x = TRUE AND hit_y = TRUE
					//DEBUG (lenght_x - n.start_x) + " " + (lenght_y - n.start_y) + "\n"
					found = TRUE
				ENDIF
			WEND

			IF found = TRUE
				n.size_x = lenght_x - n.start_x
				n.size_y = lenght_y - n.start_y

				//DEBUG n.size_x + " " + n.size_y + "\n"

				DIMPUSH lvl_room_light[], n
			ENDIF

			//DEBUG n.start_x + " " + n.start_y + "\n"
		ENDIF
	NEXT

	lvl_generate_light_room()
	lvl_calculate_light_position()

	//lvl_wall_object[]

//TYPE lvl_wall_object_type
//	status
//	cautious
//	id[10]
//	x
//	y
//ENDTYPE







	//lvl_room_light[]
//	IF image[wall_sprite[22].id].id$
//
//	DEBUG LEN(lvl_wall[])
//
//	END





//	FOR tmp_x = 0 TO (lvl_generator.size_x * 4) - 1
//		FOR tmp_y = 0 TO (lvl_generator.size_y * 4) - 1
//
//			m.alpha = -0.5
//			m.x = tmp_x * 8
//			m.y = tmp_y * 8
//
//			IF tmp_x = 4 THEN m.alpha = 0
//			IF tmp_x = 5 THEN m.alpha = -0.1
//			IF tmp_x = 6 THEN m.alpha = -0.2
//			IF tmp_x = 7 THEN m.alpha = -0.3
//			IF tmp_x = 8 THEN m.alpha = -0.4
//
//			DIMPUSH lvl_light[], m
//
//
//		NEXT
//	NEXT
ENDFUNCTION

FUNCTION lvl_generate_light_room:
LOCAL tmp_x, tmp_y

	FOREACH n IN lvl_room_light[]
		FOR tmp_y = 0 TO n.size_y - 1
			FOR tmp_x = 0 TO n.size_x - 1

				n.tile[tmp_x][tmp_y] = 0
				//IF tmp_x = 0 AND tmp_y = 0 THEN n.tile[0][0] = 1
			NEXT
		NEXT
	NEXT

	//TYPE lvl_room_light_type
	//	start_x
	//	start_y
	//	size_x
	//	size_y
	//	tile[999][999]
	//ENDTYPE

ENDFUNCTION

FUNCTION lvl_calculate_light_position:
//
// Ausrichtung
//
//     1
//    ---
// 4 |   | 2
//    ---
//     3
//
//

LOCAL tmp_x, tmp_y

	FOREACH p IN lvl_room_light[]
		FOREACH q IN lvl_wall_object[]

			// Calc Position X Achse
			FOR tmp_x = 0 TO p.size_x - 1
				IF q.x = p.start_x + tmp_x AND q.y = p.start_y - 1 AND q.cautious = 0 AND q.status = 0
					INC p.light_counter, 1
					p.tile[tmp_x][p.start_y - 1] = 1
					p.light[tmp_x][p.start_y - 1] = 1
				ENDIF
				IF q.x = p.start_x + tmp_x AND q.y = p.start_y + p.size_y AND q.cautious = 0 AND q.status = 0
					INC p.light_counter, 1
					p.tile[tmp_x][p.size_y - 1] = 1
					p.light[tmp_x][p.size_y - 1] = 3
				ENDIF
			NEXT

			// Calc Position Y Achse
			FOR tmp_y = 0 TO p.size_y - 1
				IF q.x = p.start_x - 1 AND q.y = p.start_y + tmp_y AND q.cautious = 0 AND q.status = 0
					INC p.light_counter, 1
					p.tile[p.start_x - 1][tmp_y] = 1
					p.light[p.start_x - 1][tmp_y] = 2
				ENDIF
				IF q.x = p.start_x + p.size_x AND q.y = p.start_y + tmp_y AND q.cautious = 0 AND q.status = 0
					INC p.light_counter, 1
					p.tile[p.size_x - 1][tmp_y] = 1
					p.light[p.size_x - 1][tmp_y] = 4
				ENDIF			
			NEXT
			

		NEXT
	NEXT

//TYPE lvl_room_light_type
//	start_x
//	start_y
//	size_x
//	size_y
//	tile[999][999]
//	light_counter
//	light[99][99]
//	light_typ[99]
//ENDTYPE


ENDFUNCTION


FUNCTION lvl_calculate_intercept: x_1_start, y_1_start, x_1_end, y_1_end, x_2_start, y_2_start, x_2_end, y_2_end
LOCAL numerator, denominator, u
LOCAL hit, intercept_x, intercept_y

	numerator =   ((x_2_end - x_2_start) * (y_1_start - y_2_start)) - ((y_2_end - y_2_start) * (x_1_start - x_2_start))
	denominator = ((y_2_end - y_2_start) * (x_1_end - x_1_start)) - ((x_2_end - x_2_start) * (y_1_end - y_1_start))

	u = numerator / denominator

	IF numerator = 0 AND denominator = 0
		hit = FALSE
	ENDIF

	IF denominator = 0
		hit = FALSE
	ENDIF

	IF u > 0
		intercept_x = x_1_start + u * (x_1_end - x_1_start)
		intercept_y = y_1_start + u * (y_1_end - y_1_start)
	ENDIF


	//DEBUG intercept_x + "  " + intercept_y

ENDFUNCTION