// --------------------------------- //
// Project: Starbase_Alpha_dev
// Start: Monday, November 11, 2013
// IDE Version: 11.414

TYPE settings_type
	resolution_x
	resolution_y
	fullscreen

	debugging
	fps_logging
ENDTYPE

TYPE mouse_type
	x
	y
	b1
	b2
	b1_press
	b2_press
ENDTYPE

TYPE debugging_type
	fps_logsize
	fps_output

	show_debugging_window
ENDTYPE

TYPE keyboard_type
	space
	space_press
ENDTYPE

TYPE fps_log_type
	date$
	log_fps
ENDTYPE

TYPE image_type
	id$
ENDTYPE

GLOBAL sys_settings AS settings_type
GLOBAL mouse AS mouse_type
GLOBAL keyboard AS keyboard_type
GLOBAL debugging AS debugging_type
GLOBAL fps_log[] AS fps_log_type
GLOBAL image[] AS image_type


FUNCTION sys_init:

	AUTOPAUSE FALSE

	// Bildschirmüberprüfung
	sys_check_resolution()
	sys_screen_settings()

	// Ordnerüberprüfung
	sys_check_folders()

ENDFUNCTION

FUNCTION sys_check_resolution:
LOCAL file_exist

	file_exist = DOESFILEEXIST("options.ini")

	IF file_exist = TRUE
		INIOPEN "options.ini"
			sys_settings.resolution_x = INIGET$("options", "res_x")
			sys_settings.resolution_y = INIGET$("options", "res_y")
			sys_settings.fullscreen = INIGET$("options", "fulls")
			sys_settings.debugging = INIGET$("options", "debug")
			sys_settings.fps_logging = INIGET$("options", "fpslg")
		INIOPEN ""
	ENDIF

	IF file_exist = FALSE
		sys_settings.resolution_x = 1024
		sys_settings.resolution_y = 768
		sys_settings.fullscreen = FALSE
		sys_settings.debugging = 0
		sys_settings.fps_logging = 0

		sys_create_options()
	ENDIF

ENDFUNCTION

FUNCTION sys_screen_settings:

	SETSCREEN sys_settings.resolution_x, sys_settings.resolution_y, sys_settings.fullscreen

ENDFUNCTION

FUNCTION sys_create_options:

	INIOPEN "options.ini"
		INIPUT "options", "res_x", "1024"
		INIPUT "options", "res_y", "768"
		INIPUT "options", "fulls", "0"
		INIPUT "options", "debug", "0"
		INIPUT "options", "fpslg", "0"
	INIOPEN ""

ENDFUNCTION

FUNCTION sys_mouse:
// ==================
// Mouse Routine v1.1
// ==================
LOCAL x, y, b1, b2, b1_press, b2_press
STATIC b1_tmp, b2_tmp

	MOUSESTATE x, y, b1_press, b2_press

		mouse.x = x
		mouse.y = y

	IF b1_press = FALSE THEN b1 = FALSE
	IF b1_press = TRUE THEN b1_tmp = TRUE
	IF b1_press = FALSE AND b1_tmp = TRUE
		b1 = TRUE
		b1_tmp = FALSE
	ENDIF

	IF b2_press = FALSE THEN b2 = FALSE
	IF b2_press = TRUE THEN b2_tmp = TRUE
	IF b2_press = FALSE AND b2_tmp = TRUE
		b2 = TRUE
		b2_tmp = FALSE
	ENDIF

	mouse.b1 = b1
	mouse.b2 = b2
	mouse.b1_press = b1_press
	mouse.b2_press = b2_press

ENDFUNCTION


FUNCTION sys:

	sys_mouse()
	sys_keyboard()

	IF sys_settings.debugging = TRUE
		//debugging.fps_logging = TRUE
		sys_fps_counter()
	ENDIF

ENDFUNCTION

FUNCTION sys_keyboard:
LOCAL button_c_press, button_c
STATIC button_c_tmp

	IF KEY(57) = 1
		keyboard.space_press = TRUE
	ELSE
		keyboard.space_press = FALSE
	ENDIF

	IF KEY(46) = TRUE THEN button_c_press = TRUE

	IF button_c_press = FALSE THEN button_c = FALSE
	IF button_c_press = TRUE THEN button_c_tmp = TRUE
	IF button_c_press = FALSE AND button_c_tmp = TRUE
		button_c = TRUE
		button_c_tmp = FALSE
	ENDIF



	IF KEY(29) = TRUE AND KEY(42) = TRUE AND sys_settings.debugging = TRUE
		IF button_c = TRUE THEN INC debugging.show_debugging_window, 1
		IF debugging.show_debugging_window > 1 THEN debugging.show_debugging_window = 0
	ENDIF


ENDFUNCTION

FUNCTION sys_fps_counter:
STATIC init_fps, old, count, count_fps, lang
LOCAL m AS fps_log_type

	IF init_fps = FALSE
		old = GETTIMERALL() + 1000
		init_fps = TRUE
	ENDIF

	INC count, 1

	IF GETTIMERALL() >= old
		count_fps = count
		debugging.fps_output = count

		IF sys_settings.fps_logging = TRUE

			m.date$ = PLATFORMINFO$("TIME")
			m.log_fps = count_fps



			DIMPUSH fps_log[], m

			IF LEN(fps_log[]) > 10000

				DIMDEL fps_log[], 0

			ENDIF

		ENDIF

		count = 0
		init_fps = FALSE
	ENDIF

	RETURN count_fps

ENDFUNCTION

FUNCTION sys_check_folders:
LOCAL folder$[], tmp, ok, ok_dir, error$

	DIMDATA	folder$[], "media", "logs", "media/gfx", "media/sfx", "media/fonts"

	FOR tmp = 0 TO LEN(folder$[]) - 1
		ok = DOESDIREXIST(folder$[tmp])

		IF ok = FALSE
			TRY

				ok_dir = CREATEDIR(folder$[tmp])

				IF ok_dir = FALSE THEN THROW "1 Ordner " + folder$[tmp] + " konnte nicht generiert werden."

			CATCH error$
				IF LEN(error$) > 0 THEN sys_logging(error$)
			FINALLY

		ENDIF
	NEXT

ENDFUNCTION

FUNCTION sys_logging: info$
LOCAL num$[], num, tmp, lang, information$, output$

	tmp = SPLITSTR(info$, num$[], " ")

	num = num$[0]
	lang = LEN(num$[0]) + 1

	information$ = MID$(info$, lang, -1)

	OPENFILE(0, "error.txt", -1)

	SELECT num
	CASE 1

		output$ = PLATFORMINFO$("TIME") + " " + information$

		WRITELINE 0, output$

		CLOSEFILE 0

		END

	ENDSELECT

ENDFUNCTION

FUNCTION sys_debug_console:

	IF debugging.show_debugging_window = 1

		ALPHAMODE - 0.75

		DRAWRECT 10, 10, 200, 200, RGB(32, 32, 32)

		PRINT "erfolgreich", 15, 10
		PRINT "FPS: " + debugging.fps_output, 15, 20

		ALPHAMODE 0

	ENDIF

ENDFUNCTION

FUNCTION sys_loader:

	//sys_loader_ini("media/gfx/robot.ini")
	sys_loader_ini("media/gfx/stars.ini")
	
	
	

ENDFUNCTION

FUNCTION sys_loader_ini: file$
LOCAL s AS star_sprite_type, r AS robot_sprite_type
LOCAL ok, tmp, tmp$, pic$, lang, file_load$

	ok = DOESFILEEXIST(file$)
	
	IF ok = TRUE 
		
		INIOPEN file$
		
			lang = INIGET$("pic", "count")
			
			FOR tmp = 1 TO lang
			
				tmp$ = tmp
	
				pic$ = "pic_" + tmp$
	
				file_load$ = INIGET$("pic", pic$)
				
	
						
				SELECT file$
				CASE "media/gfx/stars.ini"
					s.id = sys_load_sprite(file_load$)
					
					DEBUG s.id
					
					DIMPUSH star_sprite[], s
					
				ENDSELECT
			
			NEXT
				
		INIOPEN ""

	ELSE
	
		sys_logging("1 Datei " + file$ + " wurde nicht gefunden.")
	
	ENDIF

//		INIOPEN file$
//		//lang = INIGET$("pic", "count")
//
//		FOR tmp = 1 TO lang
//			tmp$ = tmp
//
//			pic$ = "pic_" + tmp$
//
//			file$ = INIGET$("pic", pic$)
//
//			//r.id$ = loader_picture$(file$)
//
//			//DIMPUSH robot_pics[], r
//
//
//		NEXT
//
//	INIOPEN ""

ENDFUNCTION

FUNCTION sys_load_sprite: file$
LOCAL available, lang, m AS image_type, ok

	ok = DOESFILEEXIST(file$)

	IF ok = TRUE

		available = GENSPRITE()

		lang = LEN(image[])

		LOADSPRITE file$, available

		m.id$ = available

		DIMPUSH image[], m

		RETURN lang

	ELSE

		sys_logging("1 Datei " + file$ + " wurde nicht gefunden.")

	ENDIF

ENDFUNCTION