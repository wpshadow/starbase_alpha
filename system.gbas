// --------------------------------- //
// Project: Starbase_Alpha_dev
// Start: Monday, November 11, 2013
// IDE Version: 11.414

TYPE settings_type
	resolution_x
	resolution_y
	fullscreen

	debugging
ENDTYPE

TYPE mouse_type
	x
	y
	b1
	b2
	b1_press
	b2_press
ENDTYPE

TYPE debugging_type
	fps_logging
	fps_logsize
ENDTYPE

TYPE keyboard_type
	space
	space_press
ENDTYPE

TYPE fps_log_type
	date$
	log_fps
ENDTYPE

GLOBAL sys_settings AS settings_type
GLOBAL mouse AS mouse_type
GLOBAL keyboard AS keyboard_type
GLOBAL debugging AS debugging_type
GLOBAL fps_log[] AS fps_log_type


FUNCTION sys_init:

	AUTOPAUSE FALSE

	// Bildschirmüberprüfung
	sys_check_resolution()
	sys_screen_settings()

	// Ordnerüberprüfung
	sys_check_folders()

ENDFUNCTION

FUNCTION sys_check_resolution:
LOCAL file_exist

	file_exist = DOESFILEEXIST("options.ini")

	IF file_exist = TRUE
		INIOPEN "options.ini"
			sys_settings.resolution_x = INIGET$("options", "res_x")
			sys_settings.resolution_y = INIGET$("options", "res_y")
			sys_settings.fullscreen = INIGET$("options", "fulls")
			sys_settings.debugging = INIGET$("options", "debug")
		INIOPEN ""
	ENDIF

	IF file_exist = FALSE
		sys_settings.resolution_x = 1024
		sys_settings.resolution_y = 768
		sys_settings.fullscreen = FALSE
		sys_settings.debugging = 0

		sys_create_options()
	ENDIF

ENDFUNCTION

FUNCTION sys_screen_settings:

	SETSCREEN sys_settings.resolution_x, sys_settings.resolution_y, sys_settings.fullscreen

ENDFUNCTION

FUNCTION sys_create_options:

	INIOPEN "options.ini"
		INIPUT "options", "res_x", "1024"
		INIPUT "options", "res_y", "768"
		INIPUT "options", "fulls", "0"
		INIPUT "options", "debug", "0"
	INIOPEN ""

ENDFUNCTION

FUNCTION sys_mouse:
// ==================
// Mouse Routine v1.1
// ==================
LOCAL x, y, b1, b2, b1_press, b2_press
STATIC b1_tmp, b2_tmp

	MOUSESTATE x, y, b1_press, b2_press

		mouse.x = x
		mouse.y = y

	IF b1_press = FALSE THEN b1 = FALSE
	IF b1_press = TRUE THEN b1_tmp = TRUE
	IF b1_press = FALSE AND b1_tmp = TRUE
		b1 = TRUE
		b1_tmp = FALSE
	ENDIF

	IF b2_press = FALSE THEN b2 = FALSE
	IF b2_press = TRUE THEN b2_tmp = TRUE
	IF b2_press = FALSE AND b2_tmp = TRUE
		b2 = TRUE
		b2_tmp = FALSE
	ENDIF

	mouse.b1 = b1
	mouse.b2 = b2
	mouse.b1_press = b1_press
	mouse.b2_press = b2_press

ENDFUNCTION


FUNCTION sys:

	sys_mouse()
	sys_keyboard()
	
	IF sys_settings.debugging = TRUE
		debugging.fps_logging = TRUE
		sys_fps_counter()
	ENDIF

ENDFUNCTION

FUNCTION sys_keyboard:

	IF KEY(57) = 1
		keyboard.space_press = TRUE
	ELSE
		keyboard.space_press = FALSE
	ENDIF

ENDFUNCTION

FUNCTION sys_fps_counter:
STATIC init_fps, old, count, count_fps, lang
LOCAL m AS fps_log_type

	IF init_fps = FALSE
		old = GETTIMERALL() + 1000
		init_fps = TRUE
	ENDIF

	INC count, 1

	PRINT count, 0, 20

	IF GETTIMERALL() >= old
		count_fps = count

		IF debugging.fps_logging = TRUE

			m.date$ = PLATFORMINFO$("TIME")
			m.log_fps = count_fps
			
			

			DIMPUSH fps_log[], m

			IF LEN(fps_log[]) > 10000

				DIMDEL fps_log[], 0

			ENDIF

		ENDIF

		count = 0
		init_fps = FALSE
	ENDIF

	RETURN count_fps

ENDFUNCTION

FUNCTION sys_check_folders:
LOCAL folder$[], tmp, ok, ok_dir, error$

	DIMDATA	folder$[], "media", "logs", "media/gfx", "media/sfx"

	FOR tmp = 0 TO LEN(folder$[]) - 1
		ok = DOESDIREXIST(folder$[tmp])

		IF ok = FALSE
			TRY

				ok_dir = CREATEDIR(folder$[tmp])

				IF ok_dir = FALSE THEN THROW "1 Ordner " + folder$[tmp] + " konnte nicht generiert werden."

			CATCH error$
				IF LEN(error$) > 0 THEN sys_logging(error$)
			FINALLY

		ENDIF
	NEXT

ENDFUNCTION

FUNCTION sys_logging: info$
LOCAL num$[], num, tmp, lang, information$, output$

	tmp = SPLITSTR(info$, num$[], " ")

	num = num$[0]
	lang = LEN(num$[0]) + 1

	information$ = MID$(info$, lang, -1)

	OPENFILE(0, "error.txt", -1)

	SELECT num
	CASE 1

		output$ = PLATFORMINFO$("TIME") + " " + information$

		WRITELINE 0, output$

		CLOSEFILE 0

		END

	ENDSELECT

ENDFUNCTION